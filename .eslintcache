[{"/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/index.js":"1","/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/App.js":"2","/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/comp/Main.js":"3","/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/comp/Artist.js":"4","/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/comp/Track.js":"5"},{"size":220,"mtime":1608815031297,"results":"6","hashOfConfig":"7"},{"size":1205,"mtime":1608828479626,"results":"8","hashOfConfig":"7"},{"size":9914,"mtime":1609218242935,"results":"9","hashOfConfig":"7"},{"size":973,"mtime":1609213622078,"results":"10","hashOfConfig":"7"},{"size":1401,"mtime":1609217987477,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"l9xkno",{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"14"},"/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/index.js",[],["27","28"],"/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/App.js",["29","30"],"import React, { useState, useEffect } from 'react';\nimport Main from './comp/Main';\nimport './App.css';\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false); \n  const [hideLogin, setHideLogin] = useState(false);\n\n  const params = getHashParams();\n\n  // From example code. \n  function getHashParams() {\n    var hashParams = {};\n    var e, r = /([^&;=]+)=?([^&;]*)/g,\n        q = window.location.hash.substring(1);\n    while ( e = r.exec(q)) {\n       hashParams[e[1]] = decodeURIComponent(e[2]);\n    }\n    return hashParams;\n  }\n\n  // use effect acts like component did mount lifecycle method. \n  useEffect(()=>{\n    if (params.access_token) {\n      setIsLoggedIn(true);\n      // once logged in don't render the login button. \n      setHideLogin(true)\n    }\n  }, [])\n\n  // login page and after the user is logged in diaplay the main page.\n  return (\n    <div className=\"App\">\n      {isLoggedIn ? \n\n      <Main params={params}/> : \n\n      <div id=\"login-page\">\n        LOGIN STATUS = {isLoggedIn.toString()};\n\n        <a id=\"login-button\" href=\"http://localhost:8888\">\n          {hideLogin ? null: <button>Log in</button>}\n        </a>\n      </div>}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/comp/Main.js",["31","32","33"],"import React, {useState, useEffect} from 'react';\nimport Artist from './Artist';\nimport Track from './Track';\nimport axios from 'axios';\nimport moment from 'moment';\n\nimport 'fontsource-roboto';\n\nimport { Container } from '@material-ui/core';\nimport { Avatar } from '@material-ui/core';\nimport { Typography } from '@material-ui/core';\nimport { Grid } from '@material-ui/core';\nimport { Button } from '@material-ui/core';\nimport { Link } from '@material-ui/core';\nimport { Icon } from '@material-ui/core';\nimport { Divider } from '@material-ui/core';\nimport Logo from './icon.png';\n\nfunction Main(props) {\n  const {access_token} = props.params;\n\n  // STATES:\n  const [myInfo, setMyInfo] = useState({});\n  const [myImageURl, setMyImageURL] = useState(\"\");\n  const [myName, setMyName] = useState(\"\");\n  const [myUserID, setMyUserID] = useState(0);\n  const [playlistLink, setPlaylistLink] = useState(\"\");\n  const [trackURIList, setTrackURIList] = useState([]);\n  const [term, setTerm] = useState(\"short_term\");\n  const [artistList, setArtistList] = useState([]);\n  const [trackList, setTrackList] = useState([]);\n\n  // Runs every time component is rendered. \n  // runs useEffect hook every time the page re-renders or updates.\n  // the page re-renders everytime a hook is called.  \n  useEffect(()=>{\n    getCurrentUserInfo()\n    if (artistList.length === 0 && trackList.length === 0) {\n      getArtists();\n      getTracks();\n    }\n  }, [])\n\n  // Get current user info.\n  function getCurrentUserInfo() {\n    axios.get(\"https://api.spotify.com/v1/me\", {\n      headers: {\n        \"Authorization\": \"Bearer \" + access_token\n      }\n    }).then(res=>{\n        setMyInfo(res.data);\n        setMyName(res.data.display_name);\n        setMyUserID(res.data.id);\n        setMyImageURL(res.data.images[0].url)\n      })\n  }\n\n  // get top 10 artists, default value of 1 month.\n  function getArtists(term = \"short_term\") {\n    axios.get(\"https://api.spotify.com/v1/me/top/artists\",\n      { \n        params: {\n          \"time_range\": term,\n          \"limit\": 12,\n        },\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\" : \"application/json\",\n          \"Authorization\": \"Bearer \" + access_token\n        },\n      }\n    ).then(res=>{\n      let arr = res.data.items; \n      \n      setArtistList([]);\n\n      for (let i = 0; i < arr.length; i++) {\n        let obj = {\n          id: i,\n          name: arr[i].name,\n          imageData: arr[i].images[1]\n        }\n        setArtistList(artistList => [...artistList, obj]);\n      }\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  // get top 50 tracks\n  function getTracks(term = \"short_term\") {\n    axios.get(\"https://api.spotify.com/v1/me/top/tracks\",\n      { \n        params: {\n          \"time_range\": term,\n          \"limit\": 50,\n        },\n        headers: {\n          \"Accept\": \"application/json\",\n          \"Content-Type\" : \"application/json\",\n          \"Authorization\": \"Bearer \" + access_token\n        },\n      }\n    ).then(res=>{\n      let arr = res.data.items; \n\n      setTrackList([]);\n      setTrackURIList([]);\n\n      for (let i = 0; i < arr.length; i++) {\n        let uri = arr[i].uri;\n        let obj = {\n          id: i,\n          songName: arr[i].name,\n          artistName: arr[i].artists[0].name,\n          imageData: arr[i].album.images[1],\n        }\n        \n        setTrackList(trackList => [...trackList, obj]);\n        setTrackURIList(trackURIList => [...trackURIList, uri]);\n      }\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  // Creates a playlist and adds 50 songs to the playlist. The songs and the playlist description depends on the current state. \n  function createPlaylistAndAddSongs(term) {\n    let currentMonth = getCurrentMonth();\n    let prevOneMonth = getCurrentMonthOffsetOne();\n    let prevSixMonth = getCurrentMonthOffsetSix();\n\n    let description = {\n      \"short_term\": \"Your 50 most played tracks since last month. From \" + prevOneMonth + \" to \" + currentMonth + \". Sorted by most to least. Discover yours at https://www.google.com/\",\n      \"medium_term\": \"Your 50 most played tracks since last six months. From \" + prevSixMonth + \" to \" + currentMonth + \". Sorted by most to least. Discover yours at https://www.google.com/\",\n      \"long_term\": \"Your 50 most played tracks of all time. Sorted by most to least. Discover yours at https://www.google.com/\"\n    }\n\n    let addDesc;\n    let time_range = '';\n    let long_time_range = '';\n\n    if (term === \"short_term\") {\n      time_range = `${prevOneMonth} - ${currentMonth}, `\n      long_time_range = '';\n      addDesc = description[\"short_term\"];\n    }\n\n    if (term === \"medium_term\") {\n      time_range = `${prevSixMonth} - ${currentMonth}, `\n      long_time_range = '';\n      addDesc = description[\"medium_term\"];\n    }\n\n    if (term === \"long_term\") {\n      time_range = \"\"\n      long_time_range = \" Of All Time\"\n      addDesc = description[\"long_term\"];\n    }\n\n    //console.log(\"Top 50 Tracks \" + time_range);\n    axios.request({\n      method: \"POST\",\n      url: `https://api.spotify.com/v1/users/${myUserID}/playlists`,\n      headers: {\n        \"Content-Type\" : \"application/json\",\n        \"Authorization\": \"Bearer \" + access_token\n      },\n      data : {\n        \"name\": time_range + \"Top 50 Tracks\" + long_time_range,\n        \"description\": addDesc\n      },\n    }).then(res=>{\n      setPlaylistLink(res.data.external_urls.spotify);\n      return res.data.id;\n    }).then(id=>{\n      axios.request({\n        method: \"POST\",\n        url: `https://api.spotify.com/v1/playlists/${id}/tracks`,\n        headers: {\n          \"Content-Type\" : \"application/json\",\n          \"Authorization\": \"Bearer \" + access_token\n        },\n        data : {\n          uris: trackURIList\n        }\n      })\n    }).catch(error=>{\n      console.log(error);\n    })\n  }\n\n  function getCurrentMonth() {\n    return moment().subtract(0, 'months').format('MMMM');\n  }\n\n  // Get last month. \n  function getCurrentMonthOffsetOne() {\n    return moment().subtract(1, 'months').format('MMMM');\n  }\n\n  // Get six months ago. \n  function getCurrentMonthOffsetSix() {\n    return moment().subtract(6, 'months').format('MMMM');\n  }\n\n  // Evenlisteners functions. \n  function handleGetArtist(term) {\n    if (term === \"short_term\") {\n      getArtists(term);\n    }\n\n    if (term === \"medium_term\") {\n      getArtists(term);\n    }\n\n    if (term === \"long_term\") {\n      getArtists(term);\n    }\n  }\n\n  function handleGetTracks(term) {\n    if (term === \"short_term\") {\n      getTracks(term);\n      setTerm(\"short_term\")\n    }\n\n    if (term === \"medium_term\") {\n      getTracks(term);\n      setTerm(\"medium_term\")\n    }\n\n    if (term === \"long_term\") {\n      getTracks(term);\n      setTerm(\"long_term\")\n    }\n  }\n\n  function handleAddSongsToAPlaylist() {\n    createPlaylistAndAddSongs(term);\n  }\n\n  return (\n    <Container >\n      <Grid container justify = \"center\">\n        <Avatar alt={myName} src={myImageURl} style={{width: 200, height: 200, boxShadow: \"0px 3px 4px 0px\"}}/>\n      </Grid>\n\n      <Grid container justify = \"center\" style={{marginTop: 9}}>\n        <Typography variant=\"h2\">\n          Hi, {myName}\n        </Typography>\n      </Grid>\n\n      <Divider />\n\n      <Grid container justify= \"center\" style={{marginBottom: 20, marginTop: 8}}>\n        <Typography variant=\"h6\">\n          Your Top Artists\n        </Typography>\n      </Grid>\n\n      <Grid container justify=\"center\" spacing={4} style={{marginBottom: 20}}>\n        <Grid item>\n          <Button variant=\"contained\" onClick={()=>handleGetArtist(\"short_term\")}>One Month</Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={()=>handleGetArtist(\"medium_term\")}>Six Months</Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={()=>handleGetArtist(\"long_term\")}>All Time</Button>\n        </Grid>\n      </Grid>\n\n      <Grid container spacing={2}>\n        {artistList.map(item=>(\n          <Grid item lg={3} md={6} sm={12} xs={12}>\n            <Artist key={item.id} item={item}/>\n          </Grid>\n        ))}\n      </Grid>\n\n      <Divider style={{marginTop: 30}}/>\n\n      <Grid container justify= \"center\" style={{marginTop: 20, marginBottom: 17}}>\n        <Typography variant=\"h6\">\n          Your Top 50 Tracks\n        </Typography>\n      </Grid>\n\n      <Grid container justify= \"center\" style={{marginBottom: 9}}>\n        <Button variant=\"contained\" onClick={handleAddSongsToAPlaylist}>Add to a playlist</Button>\n      </Grid>\n      \n      <Grid container justify=\"center\" style={{marginBottom: 20}}>\n        <Link href={playlistLink} underline=\"hover\" target=\"_blank\">\n          {playlistLink}\n        </Link>\n      </Grid>\n\n      <Grid container justify=\"center\" spacing={4} style={{marginBottom: 20}}>\n        <Grid item>\n          <Button variant=\"contained\" onClick={()=>handleGetTracks(\"short_term\")}>One Month</Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={()=>handleGetTracks(\"medium_term\")}>Six Months</Button>\n        </Grid>\n        <Grid item>\n          <Button variant=\"contained\" onClick={()=>handleGetTracks(\"long_term\")}>All Time</Button>\n        </Grid>\n      </Grid>\n        \n      <Grid container spacing={3}>\n        { trackList.map(item=>(\n          <Grid item lg={6} md={12} sm={12}>\n            <Track key={item.id} item={item}/>\n          </Grid> \n        ))}\n      </Grid>\n\n      <Divider style={{marginTop: 20}}/>\n\n      <Grid container justify=\"center\" style={{marginTop: 10, marginBottom: 15}}>\n        <Typography variant=\"subtitle1\">\n          by Mison\n        </Typography>\n        \n        <Icon style={{marginLeft: 5}}>\n          <Link href=\"https://open.spotify.com/user/1266564797\" target=\"_blank\">\n            <img src={Logo} height={25} width={25}/>\n          </Link>\n        </Icon>\n      </Grid>\n    </Container>\n  )\n}\n\nexport default Main;","/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/comp/Artist.js",[],["34","35"],"/Users/mison/Desktop/Home/2020/spotify-project/client/spotify-app/src/comp/Track.js",["36"],"import React from 'react';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    height: 150\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n    marginTop: 10\n  },\n  content: {\n    flex: '1 0 auto',\n  },\n  cover: {\n    width: 150,\n    height: 150\n  },\n}));\n\nfunction Track(props) {\n  const classes = useStyles();\n  const theme = useTheme();\n  \n  return (\n    <Card className={classes.root} style={{backgroundColor: \"#e0e0e0\"}}>\n      <CardMedia\n        className={classes.cover}\n        image={props.item.imageData.url}\n        title=\"album cover\"\n      />\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h5\" variant=\"h5\">\n            {props.item.songName}\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            {props.item.artistName}\n          </Typography>\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\n            {props.item.id+1}\n          </Typography>\n        </CardContent>\n      </div>\n    </Card>\n    \n  )\n}\n\nexport default Track;\n\n",{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":16,"column":13,"nodeType":"43","messageId":"44","endLine":16,"endColumn":26},{"ruleId":"45","severity":1,"message":"46","line":29,"column":6,"nodeType":"47","endLine":29,"endColumn":8,"suggestions":"48"},{"ruleId":"49","severity":1,"message":"50","line":23,"column":10,"nodeType":"51","messageId":"52","endLine":23,"endColumn":16},{"ruleId":"45","severity":1,"message":"53","line":42,"column":6,"nodeType":"47","endLine":42,"endColumn":8,"suggestions":"54"},{"ruleId":"55","severity":1,"message":"56","line":330,"column":13,"nodeType":"57","endLine":330,"endColumn":53},{"ruleId":"37","replacedBy":"58"},{"ruleId":"39","replacedBy":"59"},{"ruleId":"49","severity":1,"message":"60","line":29,"column":9,"nodeType":"51","messageId":"52","endLine":29,"endColumn":14},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-cond-assign","Expected a conditional expression and instead saw an assignment.","AssignmentExpression","missing","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'params.access_token'. Either include it or remove the dependency array.","ArrayExpression",["63"],"no-unused-vars","'myInfo' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'artistList.length', 'getArtists', 'getCurrentUserInfo', 'getTracks', and 'trackList.length'. Either include them or remove the dependency array.",["64"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["61"],["62"],"'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},{"desc":"67","fix":"68"},"Update the dependencies array to be: [params.access_token]",{"range":"69","text":"70"},"Update the dependencies array to be: [artistList.length, getArtists, getCurrentUserInfo, getTracks, trackList.length]",{"range":"71","text":"72"},[780,782],"[params.access_token]",[1432,1434],"[artistList.length, getArtists, getCurrentUserInfo, getTracks, trackList.length]"]